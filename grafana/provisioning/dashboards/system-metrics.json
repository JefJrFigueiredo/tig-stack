{
  "title": "System Metrics",
  "tags": ["telegraf", "system"],
  "timezone": "browser",
  "schemaVersion": 16,
  "version": 8,
  "refresh": "5s",
  "uid": "system-metrics",
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "panels": [
    {
      "id": 1,
      "title": "CPU Usage (%)",
      "type": "timeseries",
      "gridPos": { "x": 0, "y": 0, "w": 12, "h": 8 },
      "targets": [
        {
          "refId": "A",
          "datasource": { "type": "influxdb", "uid": "influxdb" },
          "query": "import \"date\"\n\n// Calculate how far back we're querying from now\ntimeAgoNs = uint(v: now()) - uint(v: v.timeRangeStart)\n\n// Select bucket based on how old the data is\nbucket = if timeAgoNs <= uint(v: 1h) then \"INIT_BUCKET_NAME\"\n  else if timeAgoNs <= uint(v: 24h) then \"INIT_BUCKET_NAME_20s\"\n  else \"INIT_BUCKET_NAME_1min\"\n\nfrom(bucket: bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_idle\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({ r with _value: 100.0 - r._value }))"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "min": 0,
          "max": 100,
          "custom": {
            "showPoints": "never"
          }
        }
      }
    },
    {
      "id": 2,
      "title": "Memory Usage (%)",
      "type": "timeseries",
      "gridPos": { "x": 12, "y": 0, "w": 12, "h": 8 },
      "targets": [
        {
          "refId": "A",
          "datasource": { "type": "influxdb", "uid": "influxdb" },
          "query": "import \"date\"\n\n// Calculate how far back we're querying from now\ntimeAgoNs = uint(v: now()) - uint(v: v.timeRangeStart)\n\n// Select bucket based on how old the data is\nbucket = if timeAgoNs <= uint(v: 1h) then \"INIT_BUCKET_NAME\"\n  else if timeAgoNs <= uint(v: 24h) then \"INIT_BUCKET_NAME_20s\"\n  else \"INIT_BUCKET_NAME_1min\"\n\nfrom(bucket: bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "min": 0,
          "max": 100,
          "custom": {
            "showPoints": "never"
          }
        }
      }
    },
    {
      "id": 3,
      "title": "Disk Usage (/)",
      "type": "timeseries",
      "gridPos": { "x": 0, "y": 8, "w": 12, "h": 8 },
      "targets": [
        {
          "refId": "A",
          "datasource": { "type": "influxdb", "uid": "influxdb" },
          "query": "import \"date\"\n\n// Calculate how far back we're querying from now\ntimeAgoNs = uint(v: now()) - uint(v: v.timeRangeStart)\n\n// Select bucket based on how old the data is\nbucket = if timeAgoNs <= uint(v: 1h) then \"INIT_BUCKET_NAME\"\n  else if timeAgoNs <= uint(v: 24h) then \"INIT_BUCKET_NAME_20s\"\n  else \"INIT_BUCKET_NAME_1min\"\n\nfrom(bucket: bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"path\"] == \"/\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "min": 0,
          "max": 100,
          "custom": {
            "showPoints": "never"
          }
        }
      }
    },
    {
      "id": 4,
      "title": "System Load Average (1m, 5m, 15m)",
      "type": "timeseries",
      "gridPos": { "x": 12, "y": 8, "w": 12, "h": 8 },
      "targets": [
        {
          "refId": "A",
          "datasource": { "type": "influxdb", "uid": "influxdb" },
          "query": "import \"date\"\n\n// Calculate how far back we're querying from now\ntimeAgoNs = uint(v: now()) - uint(v: v.timeRangeStart)\n\n// Select bucket based on how old the data is\nbucket = if timeAgoNs <= uint(v: 1h) then \"INIT_BUCKET_NAME\"\n  else if timeAgoNs <= uint(v: 24h) then \"INIT_BUCKET_NAME_20s\"\n  else \"INIT_BUCKET_NAME_1min\"\n\nfrom(bucket: bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system\")\n  |> filter(fn: (r) => r[\"_field\"] == \"load1\" or r[\"_field\"] == \"load5\" or r[\"_field\"] == \"load15\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "short",
          "custom": {
            "showPoints": "never"
          }
        }
      }
    }
  ]
}
