
[global_tags]
[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "5s"
  flush_jitter = "0s"
  precision = ""
  hostname = "telegraf-agent"
  omit_hostname = false

[[outputs.influxdb_v2]]
  urls = ["http://${DOCKER_INFLUXDB_INIT_HOST}:${DOCKER_INFLUXDB_INIT_PORT}"]
  token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"
  organization = "$DOCKER_INFLUXDB_INIT_ORG"
  bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"
  insecure_skip_verify = false

[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
  
[[inputs.diskio]]
[[inputs.kernel]]
[[inputs.mem]]
[[inputs.processes]]
[[inputs.swap]]
[[inputs.system]]

# [[inputs.mqtt_consumer]]
#   servers = ["tcp://mochi-mqtt:1883"]
#   topics = [
#     "1828723908/JSON",
#     "1862272350/JSON",
#     "1778385740/JSON",
#     "1778385710/JSON",
#     "1778385894/JSON"
#   ]
#   qos = 0
#   connection_timeout = "30s"
#   data_format = "json"

# [[processors.starlark]]
#   namepass = ["mqtt_consumer"]
#   source = 
#   """
#     load('math.star', 'math')

#     def apply(metric):
#       V = metric.fields.get('V')
#       A = metric.fields.get('A')
#       W = metric.fields.get('W')
      
#       if V == None or A == None or W == None:
#         return metric
      
#       VA = V * A
#       PF = W / VA if VA != 0 else 0
#       VAR = VA * math.sqrt(1 - math.pow(PF,2))
      
#       metric.fields['VA'] = VA
#       metric.fields['PF'] = PF
#       metric.fields['VAR'] = VAR
      
#       return metric
#   """
